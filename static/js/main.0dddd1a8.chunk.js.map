{"version":3,"sources":["assets/opz_dails.png","components/StyledProgressBar.js","components/InstrumentsTrackHandler.js","components/MainMIDI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StyledProgressbar","props","color","windowWidth","window","innerWidth","divSize","Math","ceil","toString","react_default","a","createElement","style","width","alignItems","padding","dist_default","percentage","text","strokeWidth","styles","root","path","stroke","strokeLinecap","trail","fill","fontSize","blue","red","InstrumentsTrackHandler","ref","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","instrumentTracks","trackNames","currentActiveTrack","parseMessage","bind","assertThisInitialized","handleMessage","moduleOutput","midiCC","setActiveTrack","saveActiveTrack","handleLfoShape","i","trackTemplate","trackName","p1","p2","filter","resonance","attack","decay","sustain","release","depth","rate","dest","shape","shapeVal","fx1","fx2","pan","level","newTrack","create","push","className","Card_default","bg","Title","Row_default","Col_default","StyledProgressBar","concat","trackId","message","command","data","note","velocity","length","getTrackId","convertTo100Range","value","midiMessage","Component","MainMIDI","state","midiAccessSuccess","midiAccessDisplay","inputs","outputs","ModuleOutput","timingClockCount","clock","channel","instrumetComponentEnable","deviceName","deviceId","onMIDISuccess","onMIDIFailure","getMIDIMessage","noteOn","noteOff","clockHandler","updateOutPut","navigator","requestMIDIAccess","then","setState","height","Body","Container_default","src_components_InstrumentsTrackHandler","midiAccess","displayMessage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","values","Symbol","iterator","next","done","input","onmidimessage","id","name","err","return","console","log","Output","App","alt","src","require","src_components_MainMIDI","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0dddd1a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/opz_dails.fbb7093a.png\";","import React from \"react\";\nimport CircularProgressbar from \"react-circular-progressbar\";\nimport 'react-circular-progressbar/dist/styles.css';\n\n\nfunction StyledProgressbar(props) {\n    var color = props.color;\n    var windowWidth = window.innerWidth;\n    //var windowHeight = window.height();\n    var sizeRatio = Math.ceil((windowWidth/100)*10);\n    var divSize = sizeRatio.toString() + \"px\";\n    \n    return (\n        <div style={{ width:divSize, alignItems:'center', padding:'5px' }}>\n                <CircularProgressbar\n                    percentage={props.percentage}\n                    text={props.text}\n                    // Path width must be customized with strokeWidth,\n                    // since it informs dimension calculations.\n                    strokeWidth={8}\n                    // You can override styles either by specifying this \"styles\" prop,\n                    // or by overriding the default CSS here:\n                    // https://github.com/iqnivek/react-circular-progressbar/blob/master/src/styles.css\n                    styles={{\n                        // Customize the root svg element\n                        root: {},\n                        // Customize the path, i.e. the part that's \"complete\"\n                        path: {\n                            // Tweak path color:\n                            stroke: color,\n                            // Tweak path to use flat or rounded ends:\n                            strokeLinecap: \"butt\",\n                            // Tweak transition animation:\n                            //transition: \"stroke-dashoffset 0.5s ease 0s\"\n                        },\n                        // Customize the circle behind the path\n                        trail: {\n                            // Tweak the trail color:\n                            stroke: \"#767777\"\n                        },\n                        // Customize the text\n                        text: {\n                            // Tweak text color:\n                            fill: \"#f88\",\n                            // Tweak text size:\n                            fontSize: \"16px\",                            \n                        }\n                    }}\n                />\n                                      \n        </div>\n        \n    );\n}\n\nexport default StyledProgressbar;\n","import React, {Component} from 'react'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './InstrumentsTrackHandler.css';\nimport Card from 'react-bootstrap/Card';\nimport StyledProgressbar from './StyledProgressBar';\n\n//colors\nconst green = \"#039C53\";\nconst blue = \"#0388C0\";\nconst yellow = \"#DCA71B\";\nconst red = \"#C62937\";\n//const grey = \"#787878\";\n//const opzGrey = \"#646464\";\nconst purple = \"#9e66c1\";\n\nclass InstrumentsTrackHandler extends Component{\n    constructor(props, ref){\n        super(props, ref);\n        this.instrumentTracks = []\n        this.trackNames = [\"Kick\", \"Snare\", \"HiHat\", \"Samples\", \"Bass\", \"Lead\", \"Arp\", \"Chord\"]\n        this.currentActiveTrack = {}\n\n        this.parseMessage = this.parseMessage.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n        this.moduleOutput = this.moduleOutput.bind(this);\n        this.midiCC = this.midiCC.bind(this);\n        this.setActiveTrack = this.setActiveTrack.bind(this);\n        this.saveActiveTrack = this.saveActiveTrack.bind(this);\n        this.handleLfoShape = this.handleLfoShape.bind(this);\n    };\n\n    \n\n    componentWillMount() {\n        var trackTemplate = {\n            trackName: \"\",\n            p1: \"\",\n            p2: \"\",\n            filter: \"\",\n            resonance: \"\",\n            attack: \"\",\n            decay: \"\",\n            sustain: \"\",\n            release: \"\",\n            depth: \"\",\n            rate: \"\",\n            dest: \"\",\n            shape: \"\",\n            shapeVal:\"\",\n            fx1: \"\",\n            fx2: \"\",\n            pan: \"\",\n            level: \"\"\n        }\n\n        var i;\n        for (i = 0; i <=7; i++) {\n            var newTrack = Object.create(trackTemplate);\n            this.instrumentTracks.push(newTrack);\n            this.instrumentTracks[i].trackName = this.trackNames[i];\n        }\n    }\n\n    moduleOutput(){\n        return (\n            <div className=\"Instrument-tracks-component\">                \n                <Card bg='dark' text='info'>\n                    <Card.Title>{this.currentActiveTrack.trackName}</Card.Title>\n                    <Card bg=\"dark\" text='white'>\n                        <Row>\n                            <Col><Card.Title>Parameters</Card.Title></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.p1} text={`P1:${this.currentActiveTrack.p1}`} color={green} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.p2} text={`P2:${this.currentActiveTrack.p2}`} color={blue} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.filter} text={`Filter:${this.currentActiveTrack.filter}`} color={yellow} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.resonance} text={`Reso:${this.currentActiveTrack.resonance}`} color={red} /></Col>\n                        </Row>\n                    </Card>\n                    <Card bg=\"dark\" text='success'  >\n                        <Row>\n                            <Col><Card.Title>Envelope</Card.Title></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.attack} text={`A:${this.currentActiveTrack.attack}`} color={green} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.decay} text={`D:${this.currentActiveTrack.decay}`} color={blue} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.sustain} text={`S:${this.currentActiveTrack.sustain}`} color={yellow} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.release} text={`R:${this.currentActiveTrack.release}`} color={red} /></Col>\n                        </Row>\n                    </Card>\n                    <Card bg=\"dark\" style={{ color: purple }}  >\n                        <Row>\n                            <Col><Card.Title>LFO</Card.Title></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.depth} text={`Depth:${this.currentActiveTrack.depth}`} color={green} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.rate} text={`Rate:${this.currentActiveTrack.rate}`} color={blue} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.dest} text={`Target:${this.currentActiveTrack.dest}`} color={yellow} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.shapeVal} text={`${this.currentActiveTrack.shape}`} color={red} /></Col>\n                        </Row>\n                    </Card>\n                    <Card bg=\"dark\" style={{ color: yellow }}  >\n                        <Row>\n                            <Col><Card.Title>Master</Card.Title></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.fx1} text={`Fx1:${this.currentActiveTrack.fx1}`} color={green} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.fx2} text={`Fx2:${this.currentActiveTrack.fx2}`} color={blue} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.pan} text={`Pan:${this.currentActiveTrack.pan}`} color={yellow} /></Col>\n                            <Col><StyledProgressbar percentage={this.currentActiveTrack.level} text={`Level:${this.currentActiveTrack.level}`} color={red} /></Col>\n                        </Row>\n                    </Card>\n                </Card>                \n            </div>\n        );\n        \n                 \n    }\n\n    \n    setActiveTrack(trackId){\n        this.currentActiveTrack = this.instrumentTracks[trackId];\n    }\n\n    saveActiveTrack(trackId){\n        this.instrumentTracks[trackId] = this.currentActiveTrack;\n    }\n\n    parseMessage(message){\n        var command = message.data[0];\n        var note = message.data[1];\n        var velocity = (message.data.length > 2) ? message.data[2] : 0; // a velocity value might not be included with a noteOff command\n        var trackId = this.getTrackId(command);\n        this.setActiveTrack(trackId);\n        if (command > 175 && command < 184){\n            this.midiCC(note, velocity);\n        }              \n        \n        this.saveActiveTrack(trackId);\n    }\n\n    \n\n\n    midiCC(note, velocity){\n        switch(note){\n            case 1:\n                this.currentActiveTrack.p1 = this.convertTo100Range(velocity);\n                break;\n            case 2:\n                this.currentActiveTrack.p2 = this.convertTo100Range(velocity);\n                break;\n            case 3:\n                this.currentActiveTrack.filter = this.convertTo100Range(velocity);\n                break;\n            case 4:\n                this.currentActiveTrack.resonance = this.convertTo100Range(velocity);\n                break;\n            case 5:\n                this.currentActiveTrack.attack = this.convertTo100Range(velocity);\n                break;\n            case 6:\n                this.currentActiveTrack.decay = this.convertTo100Range(velocity);\n                break;\n            case 7:\n                this.currentActiveTrack.sustain = this.convertTo100Range(velocity);\n                break;\n            case 8:\n                this.currentActiveTrack.release = this.convertTo100Range(velocity);\n                break;\n            case 9:\n                this.currentActiveTrack.depth = this.convertTo100Range(velocity);\n                break;\n            case 10:\n                this.currentActiveTrack.rate = this.convertTo100Range(velocity);\n                break;\n            case 11:\n                this.currentActiveTrack.dest = this.convertTo100Range(velocity);\n                break;\n            case 12:\n                this.currentActiveTrack.shapeVal = this.convertTo100Range(velocity);\n                this.handleLfoShape(this.currentActiveTrack.shapeVal);\n                break;\n            case 13:\n                this.currentActiveTrack.fx1 = this.convertTo100Range(velocity);\n                break;\n            case 14:\n                this.currentActiveTrack.fx2 = this.convertTo100Range(velocity);\n                break;\n            case 15:\n                this.currentActiveTrack.pan = this.convertTo100Range(velocity);\n                break;\n            case 16:\n                this.currentActiveTrack.level = this.convertTo100Range(velocity);\n                break;\n            default:\n                break;\n        }\n\n    }\n\n    handleLfoShape(value){\n        if(value === 0){\n            this.currentActiveTrack.shape = \"Free\";\n        }\n        else if(value === 100){\n            this.currentActiveTrack.shape = \"Trig\";\n        }\n        else if(value === 50){\n            this.currentActiveTrack.shape = \"Sqr\";\n        }\n        else if(value>0 && value<50){\n            this.currentActiveTrack.shape = \"fr-sq\"\n        }\n        else if (value > 50 && value < 100) {\n            this.currentActiveTrack.shape = \"sq-tr\"\n        }\n    }\n\n    convertTo100Range(value){\n        return  Math.ceil((value*100)/127);\n    }\n\n    getTrackId(command) {\n        var trackId = 0\n        switch (command) {\n            case 176:\n                trackId = 0;\n                break;\n            case 177:\n                trackId = 1;\n                break;\n            case 178:\n                trackId = 2;\n                break;\n            case 179:\n                trackId = 3;\n                break;\n            case 180:\n                trackId = 4;\n                break;\n            case 181:\n                trackId = 5;\n                break;\n            case 182:\n                trackId = 6;\n                break;\n            case 183:\n                trackId = 7;\n                break;\n            case 144:\n                trackId = 0;\n                break;\n            case 145:\n                trackId = 1;\n                break;\n            case 146:\n                trackId = 2;\n                break;\n            case 147:\n                trackId = 3;\n                break;\n            case 148:\n                trackId = 4;\n                break;\n            case 149:\n                trackId = 5;\n                break;\n            case 150:\n                trackId = 6;\n                break;\n            case 151:\n                trackId = 7;\n                break;\n            default:\n                trackId = 0;\n                break;\n        }\n        \n        return trackId;\n    }\n    \n    handleMessage(midiMessage){\n        this.parseMessage(midiMessage);        \n        return this.moduleOutput();\n    }    \n\n    render(){\n        return(\n            this.handleMessage(this.props.message)\n        );\n    }\n\n}\n\nexport default InstrumentsTrackHandler;","import React, { Component } from 'react'\r\nimport './MainMIDI.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport InstrumentTrackComponent from './InstrumentsTrackHandler';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass MainMIDI extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            midiAccessSuccess: false,\r\n            midiAccessDisplay:\"\",\r\n            inputs: {},\r\n            outputs: {},\r\n            ModuleOutput:\"\",\r\n            timingClockCount:0,\r\n            clock:1,\r\n            channel:1,\r\n            note:\"C\",\r\n            velocity:0\r\n        };\r\n\r\n        this.midiMessage = \"\";\r\n        this.instrumetComponentEnable = false;\r\n        this.deviceName = \"\";\r\n        this.deviceId = \"\";\r\n\r\n        // Bind all the functions\r\n        this.onMIDISuccess = this.onMIDISuccess.bind(this);\r\n        this.onMIDIFailure = this.onMIDIFailure.bind(this);\r\n        this.getMIDIMessage = this.getMIDIMessage.bind(this);\r\n        this.noteOn = this.noteOn.bind(this);\r\n        this.noteOff = this.noteOff.bind(this);\r\n        this.clockHandler = this.clockHandler.bind(this);\r\n        this.updateOutPut = this.updateOutPut.bind(this);\r\n    };\r\n\r\n    \r\n    //This is inbuilt function that get's executed before the component is mounted.\r\n    componentWillMount(){\r\n        navigator.requestMIDIAccess()\r\n            .then(this.onMIDISuccess, this.onMIDIFailure);\r\n    }\r\n\r\n    updateOutPut(){\r\n        this.setState({\r\n            ModuleOutput:\r\n                <div className=\"OutputModule\"> \r\n                    <Card bg='dark' style={{ height: '5rem' }}>\r\n                        <Card.Body>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <div style={{width:'70px', padding:'2px'}}>\r\n                                            {this.state.midiAccessDisplay}\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <div className=\"DeviceDetails\">\r\n                                            <b>Device:</b> {this.deviceName} &nbsp;<b>ID:</b> {this.deviceId}\r\n                                            <br/>\r\n                                            <b>Clock:</b> {this.state.clock}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                    <div>\r\n                        <span>\r\n                            {this.instrumetComponentEnable && <InstrumentTrackComponent message={this.midiMessage} />}\r\n                        </span>\r\n                    </div>                                       \r\n                </div>\r\n        });\r\n    }\r\n    \r\n\r\n    Output() {\r\n            return <div>{this.state.ModuleOutput}</div>            \r\n    }\r\n\r\n    onMIDISuccess(midiAccess){\r\n        this.setState({\r\n            midiAccessSuccess: true,\r\n            inputs: midiAccess.inputs,\r\n            outputs: midiAccess.outputs,\r\n            displayMessage: \"This browser supports MIDI input\",\r\n            midiAccessDisplay: <Card bg='success' text='dark'> [I] </Card>\r\n         });\r\n\r\n         for(var input of midiAccess.inputs.values()){\r\n            input.onmidimessage = this.getMIDIMessage;\r\n            this.deviceId = input.id;\r\n            this.deviceName = input.name;\r\n        }\r\n\r\n        console.log(\"MIDI Access successful\");\r\n        console.log(midiAccess);\r\n\r\n    }\r\n\r\n    onMIDIFailure(){\r\n        this.setState({\r\n            midiAccessSuccess: false,\r\n            displayMessage: \"WebMIDI is not supported by this browser\",\r\n            midiAccessDisplay: <Card bg='danger' text='dark'> [0] </Card>\r\n        });\r\n        console.log('WebMIDI is not supported by this browser.');\r\n    }\r\n\r\n    getMIDIMessage(message) {\r\n        var command = message.data[0];\r\n        //var note = message.data[1];\r\n        //var velocity = (message.data.length > 2) ? message.data[2] : 0; // a velocity value might not be included with a noteOff command\r\n\r\n        // if(command !== 248)\r\n        // {\r\n        //     console.log(\"Command:\"+ command + \", Note:\" + note + \",Velocity:\" + velocity)\r\n        // }\r\n\r\n        //if(command >175 && command<184){\r\n        if ((command > 143 && command < 152) || (command > 175 && command < 184)){\r\n            this.midiMessage = message;\r\n            this.instrumetComponentEnable = true;\r\n            //console.log(\"Command:\"+ command + \", Note:\" + note + \",Velocity:\" + velocity);\r\n            this.updateOutPut();\r\n        }\r\n        \r\n        // if( command < 144) // Note Off messages for channels\r\n        // {\r\n        //     this.noteOff(note);\r\n        // }\r\n        // else if( command < 159) // Note channels\r\n        // {\r\n        //     if (velocity > 0) {\r\n        //         console.log(\"Command:\"+ command + \", Note:\" + note + \",Velocity:\" + velocity)\r\n        //         this.noteOn(command, note, velocity);\r\n        //     } else {\r\n        //         this.noteOff(note);\r\n        //     }\r\n        // }\r\n        else if(command === 248) // Timing clock message\r\n        {\r\n            this.clockHandler();\r\n        }\r\n\r\n    }\r\n    \r\n    noteOn(command, note, velocity){\r\n        this.setState({\r\n            channel: command,\r\n            note: note,\r\n            velocity: velocity \r\n        });\r\n        this.updateOutPut();\r\n    }\r\n\r\n    noteOff(note){\r\n        this.setState({\r\n            note: note,\r\n            velocity: 0\r\n        })\r\n        this.updateOutPut();\r\n    }\r\n\r\n    clockHandler(){\r\n        if(this.state.timingClockCount < 24)\r\n            {\r\n                this.setState({\r\n                    timingClockCount: this.state.timingClockCount + 1\r\n                });\r\n            }\r\n        else{\r\n            this.setState({\r\n                timingClockCount: 0,\r\n                clock: this.state.clock + 1\r\n            });\r\n            if(this.state.clock>4){\r\n                this.setState({\r\n                    clock: 1\r\n                });\r\n            }\r\n\r\n        }\r\n        this.updateOutPut();\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            this.Output()\r\n         ); \r\n        \r\n    }\r\n}\r\n\r\nexport default MainMIDI;","import React, { Component } from 'react';\nimport './App.css';\nimport MainMIDI from './components/MainMIDI';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img className=\"App-logo\" alt=\"OPZ Dails\" src={ require(\"./assets/opz_dails.png\") } />          \n        </header>        \n        <div>          \n            <MainMIDI/>                  \n        </div>\n               \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}